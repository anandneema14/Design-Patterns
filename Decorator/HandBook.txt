Decorator Pattern:
It allows you to dynamically add new responsibilities (behavior) to an object without modifying its original code.
Itâ€™s like wrapping an object with additional features.

ðŸŽ¯ Real-world Analogy:

Imagine you order a coffee â˜• at a coffee shop.
	â€¢	Basic coffee is â‚¹100.
	â€¢	If you want milk, it adds â‚¹20.
	â€¢	If you want whipped cream, it adds â‚¹30.

Instead of creating a million classes like MilkCoffee, WhippedCreamCoffee, MilkAndWhippedCreamCoffee, etc.,
you decorate the basic coffee with add-ons dynamically.